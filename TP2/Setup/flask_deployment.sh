#!/bin/bash

#Install Python Virtualenv

sudo apt-get -y update
sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3-venv 

#Create directory

# if [ -d "flaskapp" ]; then
#   sudo rm -rf flaskapp
# fi 

mkdir /home/ubuntu/flaskapp && cd /home/ubuntu/flaskapp 

#Create the virtual environment

python3 -m venv venv

#Activate the virtual environment

source venv/bin/activate

#Install Flask

pip install Flask

pip install flask-restful

pip install ec2_metadata
#Create of a simple Flask app:

cat <<EOL > /home/ubuntu/flaskapp/flask_app.py
from ec2_metadata import ec2_metadata
from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return "\n\nThe root of the Flask Web application in the instance : "+ str(ec2_metadata.instance_id+"\n")

@app.route('/cluster1')
def cluster_1():
    return("Instance id: "+ str(ec2_metadata.instance_id)+" is responding from cluster 1!\n")

@app.route('/cluster2')
def cluster_2():
    return("Instance id: "+ str(ec2_metadata.instance_id)+" is responding from cluster 2!\n")

EOL

#Install Gunicorn:

pip install gunicorn

#Run Gunicorn to show the message in the running script for the log management:

#gunicorn -b 0.0.0.0:8000 flask_app:app 

#pkill -f "gunicorn -b 0.0.0.0:8000 flask_app:app"

#Create a file system containing service instructions:

sudo cat <<EOL > /etc/systemd/system/flaskapp.service
[Unit]
Description=None
After=network.target

[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/home/ubuntu/flaskapp
ExecStart=/home/ubuntu/flaskapp/venv/bin/gunicorn -b localhost:8000 flask_app:app
Restart=always

[Install]
WantedBy=multi-user.target
EOL

#Enable the service:

sudo systemctl daemon-reload
sudo systemctl start flaskapp
sudo systemctl enable flaskapp

#Check the app is running using:

curl localhost:8000

#Install nginx:

sudo DEBIAN_FRONTEND=noninteractive apt-get -y install nginx

#Start the Nginx service :

sudo systemctl start nginx
sudo systemctl enable nginx

#Edition of /etc/nginx/sites-available/default in order to add  :

sudo cat <<EOL > /etc/nginx/sites-available/default

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
upstream flaskhrunninginstance {
    server 127.0.0.1:8000;
}
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                proxy_pass http://flaskhrunninginstance ;
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}
EOL

#Restart nginx:

sudo systemctl restart nginx

#Go to the public address of your instance to show the message of the Flask app